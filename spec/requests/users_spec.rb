 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  let(:valid_attributes) {
    {
      "email": Faker::Internet.email,
      "password": "1234"
    }
  }

  let(:invalid_attributes) {
    {
      "email": Faker::Internet.email,
      "password": ""
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      post users_url, params: { user: valid_attributes }
      auth_token = JSON.parse(response.body)['auth_token']
      get users_url, headers: { 'Authorization' => "Bearer: #{auth_token}" }
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new User" do
        expect {
          post users_url, params: { user: valid_attributes }
        }.to change(User, :count).by(1)
      end

      it "returns the auth token" do
        post users_url, params: { user: valid_attributes }
        expect(JSON.parse(response.body)).to include("auth_token")
      end
    end

    context "with invalid parameters" do
      it "does not create a new User" do
        expect {
          post users_url, params: { user: invalid_attributes }
        }.to change(User, :count).by(0)
      end

      it "returns an unprocessable entity status" do
        post users_url, params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end